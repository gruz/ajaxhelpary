<?xml version="1.0" encoding="utf-8"?>
<extension version="3.0" type="plugin" group="ajax" method="upgrade">
  <name>Ajax - HelpAry</name>
  <version>1.1.1</version>
  <creationDate>2016-05-05</creationDate>
  <author>Gruz</author>
  <authorEmail>arygroup@gmail.com</authorEmail>
  <authorUrl>http://gruz.org.ua/en/extensions/ajaxhelpary.html</authorUrl>
  <license>GNU General Public License version 2 or later</license>
  <copyright>Copyright (C) 2004-2016 Gruz All rights reserved.</copyright>
  <description><![CDATA[
			<h3>Ajax HelpAry is and endpoint to call other plugin functions.</h3>
			<p>According to the <a href="https://docs.joomla.org/Using_Joomla_Ajax_Interface">joomla ajax interface</a> documentation you can design a plugins to interact with other extensions. But if I want a plugin (e.g. a content plugin) to use ajax, I must develop 2 plugins - the content plugin itself and an ajax plugin. That seems to be non-convinient. So here is a universal ajax plugin to call other plugin functions. </p>
			<h4>Usage:</h4>
			<b>PHP</b>:
			A link for your ajax call:<br/>
			<pre style="overflow-x: scroll; white-space: pre;">
$url_ajax_plugin =
$url_ajax_plugin =
	JRoute::_(JURI::ROOT().'?option=com_ajax&plugin=ajaxhelpary&format=raw&' // It's a must
	.JSession::getFormToken().'=1' // You must pass token
	.'&plg_name='.$this->plg_name // $this->plg_name should contain your plugin name, e.g. for a system plugin plg_system_menuary it should be menuary
	.'&plg_type='.$this->plg_type // $this->plg_type should contain your plugin type (system, content etc.), e.g. for a system plugin plg_system_menuary it should be system
	.'&function=_getFEUrl'. // The function from plugin you want to call, e.g. if you want to call plgSystemMenuary::_ajaxRun, it should be _ajaxRun
	'&uniq='.uniqid(). // It's optional to add to the link. Just in case to ignore link result caching.
	'&serialize='.base64_encode(serialize($data))); // Pass your data if needed
	$doc = JFactory::getDocument();
	$doc->addScriptDeclaration('var menuary_ajax_url = "'.$url_ajax_plugin.'";');// Add the link to the HTML DOM to let later your ajax JS script get the link to call
	$ajax_place = '<div id="my_ajax_place"></div>';
	JFactory::getApplication()->enqueueMessage($ajax_place, 'notice'); // Here in the example I output the ajax placeholder as a Joomla message
</pre>
			<br><b>Result example:</b><br>
			$url_ajax_plugin would contain somethin like:
			<pre style="overflow-x: scroll; white-space: pre;">http://site.com/administrator/?option=com_ajax&plugin=ajaxhelpary&format=raw&6a25051b89c05ea217e65efdd2aecbb6=1&plg_name=menuary&plg_type=system&function=_ajaxRun&uniq=56b5fdf87dff8&debug=1&serialize=czo1ODoiaW5kZXgucGhwP29wdGlvbj1jb21fZHBjYWxlbmRhciZ2aWV3PWV2ZW50JmlkPTImSXRlbWlkPTUwNyI7</pre>

			<b>JavaScript</b>
<pre style="overflow-x: scroll; white-space: pre;">
jQuery( document ).ready(function( $ ) {
	var resultElement = $('#my_ajax_place');
	if (resultElement.length == 0) { // If there is no your ajax placeholder, then return
		return;
	}
	var sendAjax = function(url) {
		$.get(url, function(response) {
			resultElement.append( response ); // Append response or handle it in another way
		});
	};
	sendAjax(menuary_ajax_url); // Remember menuary_ajax_url is passed to the HTML DOM by the php code
});
</pre>
<b>Function in plugin (based on menuary plugin example)</b>
<pre style="overflow-x: scroll; white-space: pre;">
...
class plgSystemMenuary extends JPluginGJFields  {
...
		 function _ajaxRun ($uniq, $serialize) {
			$serialize = unserialize(base64_decode($serialize));
			echo $uniq;
			echo '&lt;pre&gt; serialize = '.PHP_EOL;
			print_r($serialize);
			echo '&lt;/pre&gt;'.PHP_EOL;
		 }
...
}
...
</pre>
<p>
You may get more ideas how it can work when examining the <a href="http://gruz.org.ua/en/extensions/menuary-automatic-menu.html">MenuAry</a> plugin code </p>
	]]></description>
  <files>


  <filename>README.md</filename><filename plugin="ajaxhelpary">ajaxhelpary.php</filename></files>
  <config>
    <fields name="params">
      <fieldset name="basic">
        <field name="limitplugins" type="list" default="1" label="Force plugin limit" description="You may wish (recommended) to select which plugins and functions the Ajax HelpAry as allowed to run. It's better to limit, because of security.">
          <option value="0">JNO</option>
          <option value="1">JYES</option>
        </field>
        <field name="list_templates" type="repeatable" icon="list" description="" label="Limit to plugins" default="{'scope':['admin','both'],'plg_type':['system','content'],'plg_name':['menuary','notificationary'],'function':['_ajaxRun','_ajaxRun']}">
          <fieldset hidden="true" name="list_templates_modal" repeat="true">
            <field name="scope" type="list" default="both" label="Scope" description="">
              <option value="both">Backend and frontend</option>
              <option value="admin">Backend only</option>
              <option value="site">Frontend only</option>
            </field>
            <field name="plg_type" label="Plugin type" size="30" type="folderlist" directory="plugins" exclude="index.html" hide_default="true" hide_none="true"/>
            <field name="plg_name" label="Plugin name" description="E.g. for a system plugin plg_system_menuary it should be &lt;b&gt;menuary&lt;/b&gt;" size="30" type="text"/>
            <field name="function" description="e.g. if you want to call plgSystemMenuary :: _ajaxRun, it should be &lt;b&gt;_ajaxRun&lt;/b&gt;" label="Plugin function to call" size="30" type="text"/>
          </fieldset>
        </field>
      </fieldset>
    </fields>
  </config>

<updateservers><servers type="extension" priority="1" name="ajaxhelpary">http://gruz.org.ua/index.php?option=com_ars&amp;view=update&amp;task=stream&amp;format=xml&amp;id=18&amp;dummy=extension.xml</servers></updateservers></extension>
